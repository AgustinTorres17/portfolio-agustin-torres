---
interface Props {
  title: string;
}

const { title } = Astro.props;

// Ejecutar la función de inicialización cuando el DOM esté listo
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/github-icon-1.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <canvas
      id="gradient"
      style="width: 100%; height: 100vh; position: fixed; top: 0; left: 0; z-index: -1;"
    ></canvas>
  </body>
  <slot />
  <script>
    import * as neatPkg from "@firecms/neat";
    const { NeatGradient } = neatPkg;

    // Configuración del gradiente
    const neatConfig = {
      colors: [
        {
          color: "#101010",
          enabled: true,
        },
        {
          color: "#252424",
          enabled: true,
        },
        {
          color: "#0E0E0E",
          enabled: true,
        },
        {
          color: "#000000",
          enabled: false,
        },
        {
          color: "#000000",
          enabled: false,
        },
      ],
      speed: 4,
      horizontalPressure: 4,
      verticalPressure: 5,
      waveFrequencyX: 2,
      waveFrequencyY: 3,
      waveAmplitude: 5,
      shadows: 0,
      highlights: 2,
      colorBrightness: 1,
      colorSaturation: 7,
      wireframe: false,
      colorBlending: 6,
      backgroundColor: "#000000",
      backgroundAlpha: 0.85,
      resolution: 0.45,
    };
    // Inicialización del gradiente al montar el componente
    const initGradient = () => {
      const gradientElement = document.getElementById(
        "gradient"
      ) as HTMLCanvasElement;
      if (gradientElement) {
        const neatInstance = new NeatGradient({
          ref: gradientElement,
          ...neatConfig,
        });

        // Destruir la instancia del gradiente al desmontar el componente
        return () => neatInstance.destroy();
      }
    };

    document.addEventListener("DOMContentLoaded", () => {
      const menuToggle = document.querySelector(".menu-toggle") as HTMLElement;
      const menuClose = document.querySelector(".menu-close") as HTMLElement;
      const navLinks = document.querySelector(".nav-links") as HTMLElement;
      const links = document.querySelectorAll(".nav-links a");
      const body = document.querySelector("body") as HTMLElement;
      initGradient();

      menuClose.style.visibility = "hidden";

      menuToggle.addEventListener("click", () => {
        navLinks.classList.toggle("active");
        menuClose.style.visibility = "visible";
        menuToggle.style.visibility = "hidden";
        body.style.overflow = "hidden";
      });

      menuClose.addEventListener("click", () => {
        navLinks.classList.remove("active");
        menuClose.style.visibility = "hidden";
        menuToggle.style.visibility = "visible";
        body.style.overflow = "auto";
      });

      navLinks.addEventListener("click", () => {
        navLinks.classList.remove("active");
        menuClose.style.visibility = "hidden";
        menuToggle.style.visibility = "visible";
        body.style.overflow = "auto";
      });

      links.forEach((link) => {
        link.addEventListener("click", (event) => {
          event.preventDefault();
          const targetId = link.getAttribute("href").substring(1);
          const targetElement = document.getElementById(targetId);

          if (targetElement) {
            const offset =
              targetElement.getBoundingClientRect().top +
              window.scrollY -
              window.innerHeight * 0.1;
            window.scrollTo({
              top: offset,
              behavior: "smooth",
            });
            navLinks.classList.remove("active");
          }
        });
      });
    });
  </script>
</html>

<style is:global>

  body > a {
    display: none !important;
  }
  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-black") format("woff");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }
  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Bold.woff") format("woff");
    font-weight: bold;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Light.woff") format("woff");
    font-weight: 300;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Medium.woff") format("woff");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Regular.woff") format("woff");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-SemiBold.woff") format("woff");
    font-weight: 600;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Thin.woff") format("woff");
    font-weight: 100;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-UltraBlack.woff") format("woff");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-UltraLight.woff") format("woff");
    font-weight: 200;
    font-style: normal;
    font-display: swap;
  }

  * {
    margin: 0;
    padding: 0;
  }
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  body {
    min-height: 100dvh;
    background-color: #040404;
    color: white;
    font-family: Geist;
    position: relative;
  }

  html {
    scroll-behavior: smooth;
  }
  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p {
    text-wrap: pretty;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    text-wrap: balance;
  }

  img,
  video,
  svg {
    height: auto;
    max-width: 100%;
  }

  section {
    height: 94dvh;
    margin-bottom: 8rem;
  }

  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
      transition: none;
    }
  }

  .grid-container {
    display: grid;
    grid-template-columns: 50% 50%;
    justify-content: center;
    align-items: center;
    height: 100%;
    justify-items: center;
  }

  .flex-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
  }

  @media screen and (max-width: 660px) {
    .grid-container {
      grid-template-columns: 1fr;
      gap: 2rem;
      align-items: start;
    }
    p,
    h1,
    h2,
    h3,
    h4 {
      text-align: center;
    }

    a {
      display: block;
      text-align: center;
    }

    section {
      /* height: 94dvh; */
      margin-bottom: 5rem;
    }
  }

  /*   main::before {
    position: absolute;
    content: "";
    inset: 0;
    z-index: -1;
    opacity: 0.1;
    background-color: #141414;
    background-image: repeating-radial-gradient(
        circle at 0 0,
        transparent 0,
        #141414 14px
      ),
      repeating-linear-gradient(#87868655, #878686);
  } */
</style>
